CREATE TABLE IF NOT EXISTS rating
(
    rating_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name      varchar(50)
);

CREATE TABLE IF NOT EXISTS film
(
    film_id      INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name         varchar(20) NOT NULL CHECK (name <> ''),
    description  varchar(200),
    release_date date        NOT NULL CHECK (release_date >= '1895-12-28' AND release_date <= CURRENT_DATE),
    duration     INTEGER     NOT NULL,
    rating_id    INTEGER REFERENCES rating (rating_id) ON DELETE NO ACTION
);

CREATE TABLE IF NOT EXISTS _user
(
    user_id  INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    birthday date         NOT NULL CHECK (birthday <= CURRENT_DATE),
    login    varchar(100) NOT NULL,
    email    varchar(50)  NOT NULL UNIQUE,
    name     varchar(100) NOT NULL
);

CREATE TABLE IF NOT EXISTS friendship
(
    user_id   INTEGER REFERENCES _user (user_id) ON DELETE CASCADE,
    friend_id INTEGER REFERENCES _user (user_id) ON DELETE CASCADE,
    status    varchar(13) NOT NULL CHECK (status IN ('CONFIRMED', 'UNCONFIRMED')),
    PRIMARY KEY (user_id, friend_id)
);

CREATE TABLE IF NOT EXISTS genre
(
    genre_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name     varchar(50) NOT NULL
);

CREATE TABLE IF NOT EXISTS film_genre
(
    film_id  INTEGER REFERENCES film (film_id) ON DELETE CASCADE,
    genre_id INTEGER REFERENCES genre (genre_id) ON DELETE CASCADE,
    PRIMARY KEY (film_id, genre_id)
);

CREATE TABLE IF NOT EXISTS likes
(
    film_id INTEGER REFERENCES film (film_id) ON DELETE CASCADE,
    user_id INTEGER REFERENCES _user (user_id) ON DELETE CASCADE,
    PRIMARY KEY (film_id, user_id)
);
